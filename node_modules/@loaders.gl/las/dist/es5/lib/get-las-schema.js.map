{"version":3,"sources":["../../../src/lib/get-las-schema.ts"],"names":["getLASSchema","lasHeader","attributes","metadataMap","makeMetadataFromLasHeader","schema","Map","set","pointsOffset","toString","pointsFormatId","pointsStructSize","pointsCount","JSON","stringify","scale","offset","maxs","undefined","mins","totalToRead","totalRead","versionAsString","isCompressed"],"mappings":";;;;;;;;AAAA;;AASO,SAASA,YAAT,CAAsBC,SAAtB,EAA4CC,UAA5C,EAAgF;AACrF,MAAMC,WAAW,GAAGC,yBAAyB,CAACH,SAAD,CAA7C;AACA,MAAMI,MAAM,GAAG,8BAAiBH,UAAjB,EAA6BC,WAA7B,CAAf;AACA,SAAOE,MAAP;AACD;;AAOM,SAASD,yBAAT,CAAmCH,SAAnC,EAA8E;AACnF,MAAME,WAAW,GAAG,IAAIG,GAAJ,EAApB;AACAH,EAAAA,WAAW,CAACI,GAAZ,CAAgB,kBAAhB,EAAoCN,SAAS,CAACO,YAAV,CAAuBC,QAAvB,CAAgC,EAAhC,CAApC;AACAN,EAAAA,WAAW,CAACI,GAAZ,CAAgB,oBAAhB,EAAsCN,SAAS,CAACS,cAAV,CAAyBD,QAAzB,CAAkC,EAAlC,CAAtC;AACAN,EAAAA,WAAW,CAACI,GAAZ,CAAgB,sBAAhB,EAAwCN,SAAS,CAACU,gBAAV,CAA2BF,QAA3B,CAAoC,EAApC,CAAxC;AACAN,EAAAA,WAAW,CAACI,GAAZ,CAAgB,iBAAhB,EAAmCN,SAAS,CAACW,WAAV,CAAsBH,QAAtB,CAA+B,EAA/B,CAAnC;AACAN,EAAAA,WAAW,CAACI,GAAZ,CAAgB,WAAhB,EAA6BM,IAAI,CAACC,SAAL,CAAeb,SAAS,CAACc,KAAzB,CAA7B;AACAZ,EAAAA,WAAW,CAACI,GAAZ,CAAgB,YAAhB,EAA8BM,IAAI,CAACC,SAAL,CAAeb,SAAS,CAACe,MAAzB,CAA9B;;AACA,MAAIf,SAAS,CAACgB,IAAV,KAAmBC,SAAvB,EAAkC;AAChCf,IAAAA,WAAW,CAACI,GAAZ,CAAgB,UAAhB,EAA4BM,IAAI,CAACC,SAAL,CAAeb,SAAS,CAACgB,IAAzB,CAA5B;AACD;;AACD,MAAIhB,SAAS,CAACkB,IAAV,KAAmBD,SAAvB,EAAkC;AAChCf,IAAAA,WAAW,CAACI,GAAZ,CAAgB,UAAhB,EAA4BM,IAAI,CAACC,SAAL,CAAeb,SAAS,CAACkB,IAAzB,CAA5B;AACD;;AACDhB,EAAAA,WAAW,CAACI,GAAZ,CAAgB,iBAAhB,EAAmCN,SAAS,CAACmB,WAAV,CAAsBX,QAAtB,CAA+B,EAA/B,CAAnC;AACAN,EAAAA,WAAW,CAACI,GAAZ,CAAgB,6BAAhB,EAA+CN,SAAS,CAACoB,SAAV,CAAoBZ,QAApB,CAA6B,EAA7B,CAA/C;;AACA,MAAIR,SAAS,CAACqB,eAAV,KAA8BJ,SAAlC,EAA6C;AAC3Cf,IAAAA,WAAW,CAACI,GAAZ,CAAgB,qBAAhB,EAAuCN,SAAS,CAACqB,eAAjD;AACD;;AACD,MAAIrB,SAAS,CAACsB,YAAV,KAA2BL,SAA/B,EAA0C;AACxCf,IAAAA,WAAW,CAACI,GAAZ,CAAgB,kBAAhB,EAAoCN,SAAS,CAACsB,YAAV,CAAuBd,QAAvB,EAApC;AACD;;AACD,SAAON,WAAP;AACD","sourcesContent":["import {Schema, MeshAttributes, deduceMeshSchema} from '@loaders.gl/schema';\nimport type {LASHeader} from './las-types';\n\n/**\n * Gets schema from PLY header\n * @param lasHeader\n * @param metadata\n * @returns Schema\n */\nexport function getLASSchema(lasHeader: LASHeader, attributes: MeshAttributes): Schema {\n  const metadataMap = makeMetadataFromLasHeader(lasHeader);\n  const schema = deduceMeshSchema(attributes, metadataMap);\n  return schema;\n}\n\n/**\n * Make arrow like schema metadata by LASHeader properties\n * @param lasHeader\n * @returns\n */\nexport function makeMetadataFromLasHeader(lasHeader: LASHeader): Map<string, string> {\n  const metadataMap = new Map();\n  metadataMap.set('las_pointsOffset', lasHeader.pointsOffset.toString(10));\n  metadataMap.set('las_pointsFormatId', lasHeader.pointsFormatId.toString(10));\n  metadataMap.set('las_pointsStructSize', lasHeader.pointsStructSize.toString(10));\n  metadataMap.set('las_pointsCount', lasHeader.pointsCount.toString(10));\n  metadataMap.set('las_scale', JSON.stringify(lasHeader.scale));\n  metadataMap.set('las_offset', JSON.stringify(lasHeader.offset));\n  if (lasHeader.maxs !== undefined) {\n    metadataMap.set('las_maxs', JSON.stringify(lasHeader.maxs));\n  }\n  if (lasHeader.mins !== undefined) {\n    metadataMap.set('las_mins', JSON.stringify(lasHeader.mins));\n  }\n  metadataMap.set('las_totalToRead', lasHeader.totalToRead.toString(10));\n  metadataMap.set('las_pointsFortotalReadmatId', lasHeader.totalRead.toString(10));\n  if (lasHeader.versionAsString !== undefined) {\n    metadataMap.set('las_versionAsString', lasHeader.versionAsString);\n  }\n  if (lasHeader.isCompressed !== undefined) {\n    metadataMap.set('las_isCompressed', lasHeader.isCompressed.toString());\n  }\n  return metadataMap;\n}\n"],"file":"get-las-schema.js"}