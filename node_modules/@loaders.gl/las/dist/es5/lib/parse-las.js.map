{"version":3,"sources":["../../../src/lib/parse-las.ts"],"names":["parseLAS","arrayBuffer","options","parseLASMesh","pointIndex","positions","colors","intensities","classifications","originalHeader","lasMesh","loader","loaderData","schema","Schema","header","vertexCount","boundingBox","attributes","topology","mode","parseLASChunked","las","skip","decoder","lasHeader","total","totalToRead","PositionsType","fp64","Float64Array","Float32Array","pointsFormatId","Uint8Array","Uint16Array","POSITION","value","size","intensity","classification","COLOR_0","batchSize","pointsCount","scale","scaleX","scaleY","scaleZ","offset","offsetX","offsetY","offsetZ","twoByteColor","detectTwoByteColors","colorDepth","i","getPoint","position","color","meshBatch","totalRead","progress","onProgress","rawData","onParseData","dataHandler","LASFile","open","getHeader","Unpacker","getUnpacker","Math","ceil","max","chunk","readData","count","versionAsString","isCompressed","unpacker","buffer","hasMoreData","e","close","console","warn"],"mappings":"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","sourcesContent":["// ported and es6-ified from https://github.com/verma/plasio/\nimport type {ArrowTable, ColumnarTable} from '@loaders.gl/schema';\nimport type {LASLoaderOptions} from '../las-loader';\nimport type {LASMesh, LASHeader} from './las-types';\nimport {Schema, getMeshBoundingBox /* , convertMesh */} from '@loaders.gl/schema';\nimport {LASFile} from './laslaz-decoder';\nimport {getLASSchema} from './get-las-schema';\n\ntype LASChunk = {\n  count: number;\n  buffer: ArrayBuffer;\n  hasMoreData: boolean;\n  versionAsString?: string;\n  isCompressed?: boolean;\n};\n\n/**\n * Parsing of .las file\n * @param arrayBuffer\n * @param options\n * @returns LASHeader\n */\nexport default function parseLAS(\n  arrayBuffer: ArrayBuffer,\n  options?: LASLoaderOptions\n): LASMesh | ArrowTable | ColumnarTable {\n  return parseLASMesh(arrayBuffer, options);\n  // This code breaks pointcloud example on the website\n  // const mesh = parseLASMesh(arrayBuffer, options);\n  // return convertMesh(mesh, options?.las?.shape || 'mesh') as LASMesh | ArrowTable | ColumnarTable;\n}\n\n/**\n * Parsing of .las file\n * @param arrayBuffer\n * @param options\n * @returns LASHeader\n */\nfunction parseLASMesh(arrayBuffer: ArrayBuffer, options: LASLoaderOptions = {}): LASMesh {\n  let pointIndex: number = 0;\n\n  let positions: Float32Array | Float64Array;\n  let colors: Uint8Array | null;\n  let intensities: Uint16Array;\n  let classifications: Uint8Array;\n  let originalHeader: any;\n\n  const lasMesh: LASMesh = {\n    loader: 'las',\n    loaderData: {} as LASHeader,\n    // shape: 'mesh',\n    schema: new Schema([]),\n    header: {\n      vertexCount: 0,\n      boundingBox: [\n        [0, 0, 0],\n        [0, 0, 0]\n      ]\n    },\n    attributes: {},\n    topology: 'point-list',\n    mode: 0 // GL.POINTS\n  };\n\n  /* eslint-disable max-statements */\n  // @ts-ignore Possibly undefined\n  parseLASChunked(arrayBuffer, options.las?.skip, (decoder: any = {}, lasHeader: LASHeader) => {\n    if (!originalHeader) {\n      originalHeader = lasHeader;\n      const total = lasHeader.totalToRead;\n\n      const PositionsType = options.las?.fp64 ? Float64Array : Float32Array;\n      positions = new PositionsType(total * 3);\n      // laslaz-decoder.js `pointFormatReaders`\n      colors = lasHeader.pointsFormatId >= 2 ? new Uint8Array(total * 4) : null;\n      intensities = new Uint16Array(total);\n      classifications = new Uint8Array(total);\n\n      lasMesh.loaderData = lasHeader;\n      lasMesh.attributes = {\n        POSITION: {value: positions, size: 3},\n        // non-gltf attributes, use non-capitalized names for now\n        intensity: {value: intensities, size: 1},\n        classification: {value: classifications, size: 1}\n      };\n\n      if (colors) {\n        lasMesh.attributes.COLOR_0 = {value: colors, size: 4};\n      }\n    }\n\n    const batchSize = decoder.pointsCount;\n    const {\n      scale: [scaleX, scaleY, scaleZ],\n      offset: [offsetX, offsetY, offsetZ]\n    } = lasHeader;\n\n    const twoByteColor = detectTwoByteColors(decoder, batchSize, options.las?.colorDepth);\n\n    for (let i = 0; i < batchSize; i++) {\n      const {position, color, intensity, classification} = decoder.getPoint(i);\n\n      positions[pointIndex * 3] = position[0] * scaleX + offsetX;\n      positions[pointIndex * 3 + 1] = position[1] * scaleY + offsetY;\n      positions[pointIndex * 3 + 2] = position[2] * scaleZ + offsetZ;\n\n      if (color && colors) {\n        if (twoByteColor) {\n          colors[pointIndex * 4] = color[0] / 256;\n          colors[pointIndex * 4 + 1] = color[1] / 256;\n          colors[pointIndex * 4 + 2] = color[2] / 256;\n        } else {\n          colors[pointIndex * 4] = color[0];\n          colors[pointIndex * 4 + 1] = color[1];\n          colors[pointIndex * 4 + 2] = color[2];\n        }\n        colors[pointIndex * 4 + 3] = 255;\n      }\n\n      intensities[pointIndex] = intensity;\n      classifications[pointIndex] = classification;\n\n      pointIndex++;\n    }\n\n    const meshBatch = {\n      ...lasMesh,\n      header: {\n        vertexCount: lasHeader.totalRead\n      },\n      progress: lasHeader.totalRead / lasHeader.totalToRead\n    };\n\n    options?.onProgress?.(meshBatch);\n  });\n  /* eslint-enable max-statements */\n\n  lasMesh.header = {\n    vertexCount: originalHeader.totalToRead,\n    boundingBox: getMeshBoundingBox(lasMesh?.attributes || {})\n  };\n\n  if (lasMesh) {\n    lasMesh.schema = getLASSchema(lasMesh.loaderData, lasMesh.attributes);\n  }\n  return lasMesh;\n}\n\n/**\n * parse laz data\n * @param rawData\n * @param skip\n * @param onParseData\n * @return parsed point cloud\n */\n/* eslint-enable max-statements */\nexport function parseLASChunked(rawData: ArrayBuffer, skip: number, onParseData: any = {}): void {\n  const dataHandler = new LASFile(rawData);\n\n  try {\n    // open data\n    dataHandler.open();\n\n    const header = dataHandler.getHeader();\n    // start loading\n    const Unpacker = dataHandler.getUnpacker();\n\n    const totalToRead = Math.ceil(header.pointsCount / Math.max(1, skip));\n    header.totalToRead = totalToRead;\n    let totalRead = 0;\n\n    /* eslint-disable no-constant-condition */\n    while (true) {\n      const chunk: LASChunk = dataHandler.readData(1000 * 100, 0, skip);\n\n      totalRead += chunk.count;\n\n      header.totalRead = totalRead;\n      header.versionAsString = chunk.versionAsString;\n      header.isCompressed = chunk.isCompressed;\n\n      const unpacker = new Unpacker(chunk.buffer, chunk.count, header);\n\n      // surface unpacker and progress via call back\n      // use unpacker.pointsCount and unpacker.getPoint(i) to handle data in app\n      onParseData(unpacker, header);\n\n      if (!chunk.hasMoreData || totalRead >= totalToRead) {\n        break;\n      }\n    }\n  } catch (e) {\n    throw e;\n  } finally {\n    dataHandler.close();\n  }\n}\n\n/**\n * @param decoder\n * @param batchSize\n * @param colorDepth\n * @returns boolean\n */\nfunction detectTwoByteColors(\n  decoder: any = {},\n  batchSize: number,\n  colorDepth?: number | string\n): boolean {\n  let twoByteColor = false;\n  switch (colorDepth) {\n    case 8:\n      twoByteColor = false;\n      break;\n    case 16:\n      twoByteColor = true;\n      break;\n    case 'auto':\n      if (decoder.getPoint(0).color) {\n        for (let i = 0; i < batchSize; i++) {\n          const {color} = decoder.getPoint(i);\n          // eslint-disable-next-line max-depth\n          if (color[0] > 255 || color[1] > 255 || color[2] > 255) {\n            twoByteColor = true;\n          }\n        }\n      }\n      break;\n    default:\n      // eslint-disable-next-line\n      console.warn('las: illegal value for options.las.colorDepth');\n      break;\n  }\n  return twoByteColor;\n}\n"],"file":"parse-las.js"}